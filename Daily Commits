1.To determine the number of available seats for reservation in FoodieFinds:
Reservation System:
Manage reservations with dates, times, and guest counts.
Maintain tables with varying capacities.
Availability Calculation:
Query existing reservations for a given date and time.
Calculate available seats by subtracting booked seats from total table capacity.

2. "Fortified Data Protection: Your trust is our top priority. We employ state-of-the-art encryption protocols, access controls, and continuous monitoring to ensure the safety and integrity of your user/admin information within our database.
Rest assured, our dedicated team is committed to upholding the highest standards of security to safeguard your data against any potential threats or breaches."
Beyond robust technical measures, we also adhere to strict compliance standards, undergo regular security audits, and implement proactive threat detection mechanisms. 
Your user/admin information is not just stored securely but actively defended against evolving cyber threats. Count on us to keep your data safe and your trust well-placed."

3.Our web application allows users to easily book a table at their preferred restaurants.Users may easily browse through a wide selection of restaurants options, choose the goods they want.
Users can also just book a table at the time and date of their choice, guaranteeing a wonderful meal.
Our software seeks to give customers a simple method to take advantage of delicious cuisine and dining experiences whenever it's convenient for them.

4.This update enables the system to adjust restaurant ratings when users leave positive reviews. Now, when diners share their positive experiences, the restaurant's overall rating will reflect this feedback accurately. 
This enhancement aims to improve the reliability of restaurant ratings, making it easier for users to find top-quality dining options on FoodieFinds.

5. We've opted for role-based login for users accessing our application.

-- We have initiated the process of gathering requirements for the project.
-- we gather the information about the project and preparing the document for the project
--The app should offer restaurant recommendations based on user preferences and past dining history.
--Recommendations should be tailored to each user's taste and dining habits.



6.Secure user authentication is critical to protect personal dining preferences and ensure user privacy.
Reservation and payment information must be encrypted to facilitate secure transactions.So the customer satisfaction will be gained.



----Non Functional requirements--->
1. Performance:
Both iOS and Android devices must have fluid and responsive user interfaces offered by the program.
Product listings, image loading times, and checkout procedures should all be optimized for speedy access while taking possible network variations into account.
Even during periods of high traffic, the app should be able to manage many user interactions with efficiency and maintain acceptable response times.
2. Security:
Sensitive data, including payment information and personal information, must be transmitted and authenticated by users using encryption to protect its integrity.
Protecting user credentials and other sensitive data kept locally on the device requires the implementation of secure storage techniques.
In order to defend against typical security risks like No-SQL injection, cross-site scripting (XSS), and cross-site request forgery (CSRF), the app should follow recommended procedures.
3. Stability:
On both the Android and iOS operating systems, the program must be reliable, devoid of frequent crashes or strange behavior.
In particular, on devices with restricted hardware capabilities, memory management and resource consumption should be optimized to prevent performance degradation over time.
3) Sustainability:
Code quality, documentation, and version control best practices should all be adhered to by the well-organized and manageable codebase.
Enforcing modular architecture and separating concerns will help with code reuse, testing, and future improvements.
4) Backup and Restoration:
To prevent data loss in the event of hardware failures or system issues, regular backups of the application data, including user profiles, product information, and transaction records, should be carried out.
Backup schedules and retention policies should be established to guarantee that backup copies are kept for a suitable amount of time and are easily available for restoration reasons.
Point-in-time recovery techniques must be put into place to enable the program to be restored to a particular state prior to data corruption or unintentional deletions.
Backup data should be safely kept off-site or in cloud storage services to guard against calamities like fire, theft, or server failures.
Automated backup and restore procedures should be routinely observed to ensure their efficacy and quickly address any problems or malfunctions.
5. Compatibility:
Compatibility with various devices, operating systems, and web browsers to reach a broader audience. 
Integration with external APIs and services to support real-time updates for menus, availability, and reservations.
Adherence to industry standards and best practices to ensure interoperability with existing systems and technologies.
6. Availability:
Users must always be able to use the app, even during brief maintenance or update windows.
To guarantee ongoing availability even in the case of server failures or network disruptions, redundant server infrastructure and failover procedures should be in place.
7. Scalability
The application architecture should be planned to handle future increases in the number of users and the size of the product catalog.
With the option to add more server instances or cloud resources as needed, horizontal scaling should be provided to accommodate rising concurrent user activity.
To expand specific components, like databases and application servers, to effectively handle increased traffic, vertical scaling methods need to be in place.
To prevent performance bottlenecks and spread incoming traffic evenly across several server instances, load balancing solutions should be put into practice.
8.User Experience (UX):
Make sure the app works well no matter what device people are using. It should be easy for users to find what they're looking for and complete their purchases smoothly. Also, include features that make the app accessible to people with disabilities.
9.Compatibility:
Test the app on different types of Android and iOS devices to ensure it works on all of them. It should look good and function properly on screens of various sizes and shapes, and with different hardware setups.
10.Usability:
Design the app's interface to be easy to understand and visually appealing. Provide clear labels and instructions, and give users feedback about what the app is doing, like error messages and loading indicators.

->Developing the necessary APIs for this project.

Allow users and admins to log in and confirm their identity to access the application features.Users and admins enter their email, phone number, and password.Credentials are securely stored in Firebase database.

--->Browsing Restaurants and Adding Restaurants

Users find top-rated restaurants; admins add new ones seamlessly.Users navigate and search; admins add restaurants effortlessly.

Smooth browsing experience for users; easy restaurant addition for admins.


--->Restaurant availability
Establish connectivity with restaurant APIs to retrieve real-time data on availability and menu changes.
Initiate communication with restaurant APIs to fetch data.
Retrieve and process up-to-date information regarding restaurant availability and menu alterations.
Present real-time updates on available tables and menu items to users.

--->Restaurant Search
Objective: Users can search for restaurants based on ratings and preferred cuisines.
Integrated restaurant search function with keyword and filter options, enhancing user experience in finding preferred dining choices.

----->User Data Storage: Implement a database schema to securely store user information such as user ID, username, email, encrypted passwords, location, dining preferences, and past dining history. 
Ensure proper encryption techniques are applied to sensitive data fields.


----
Restaurant Data Storage: Design a data structure to store restaurant details including restaurant ID, name, location, cuisine type, price range, ratings, menu items, photos, and reviews. Use appropriate indexing for efficient retrieval of restaurant information.

--->Prototypes
Implemented user registration and authentication, including validation checks and secure data storage. Added browsing functionality for users to find restaurants and for admins to add new ones. Enabled connectivity to restaurant APIs for real-time updates.

---Integration with Restaurant APIs: Establish integration with restaurant APIs to fetch real-time updates on table availability and menu changes. Implement error handling and retry mechanisms to ensure robust communication with external APIs.

Integration with Restaurant APIs: Establish integration with restaurant APIs to fetch real-time updates on table availability and menu changes.
Implement error handling and retry mechanisms to ensure robust communication with external APIs.

We plan to save user data in Firebase.
1.Integrated Firebase into FoodieFinds app to enhance functionality and performance.
2.Utilized Firebase Authentication for secure user authentication and account management.
3.Leveraged Firebase Realtime Database for storage and retrieval of restaurant listings, reviews, and reservation data.
4.Integrated Firebase Cloud Functions to handle server-side operations and real-time updates.
5.Implemented Firebase Remote Config for dynamic app configurations.

----->Users Collection:
Store user profiles with fields such as name, email, and other relevant information.
Each document in this collection represents a user.
Restaurants Collection:
Store restaurant information including name, location, cuisine, ratings, and reviews.
Each document in this collection represents a restaurant.
Reviews Subcollection (within Restaurants Collection):
Store reviews for each restaurant, including reviewer's ID, review content, rating, and timestamp.
Each document in this subcollection represents a review for a specific restaurant

------
Reservations Collection:
Store reservation details such as user ID, restaurant ID, date, time, and party size.
Each document in this collection represents a reservation made by a user.

Firebase Firestore is often referred to as a NoSQL database, specifically a document-oriented database. 

Outline of thr project-----Our project focuses on developing a user-friendly web application for restaurant discovery and dining reservations. 
                           By leveraging advanced technologies and best practices in UX/UI design, we aim to create a seamless experience for users.
                           Key features include user registration, restaurant browsing, review reading, reservation management, and personalized recommendations

About the project-------Discover nearby restaurants, read reviews, and book tables hassle-free with Foodie Finds.
                        Get real-time updates and personalized suggestions for a seamless dining experience. 

Problem Statement------In today's busy world, it's hard to find a great place to eat. There are so many choices, and it's tough to know which ones are good. Plus, 
                        booking a table can be a hassle with all the different websites and apps. This makes it frustrating for both diners and restaurants. We need a 
                        simple solution that helps people find delicious restaurants easily and book tables without any stress.




Functional requirements and non functional requirements are necessary in order to  fullfill the project goals.FoodieFinds is very useful for users inorder to get the best food in the restaurant.


Proposed Solution----- 	We're creating Foodie Finds, an easy-to-use app that helps you find great restaurants and book tables hassle-free. With Foodie Finds, you can discover nearby eateries based 
                        on your tastes and see real-time menu and table availability updates. The app will also give personalized recommendations based on your dining.
                        Foodie Finds makes finding and enjoying delicious meals simple and fun!
----->Feature Prioritization:

Identifying key features like restaurant discovery and fast loading highlights a strategic focus on essential functionalities, ensuring efficient resource utilization.

----->Resource Allocation:

Planning for effective data management reflects proactive resource allocation, enabling team members to work efficiently with the right tools and minimizing the risk of information loss.

--->updated the functional requirements and list of proposed prototypes...

Began implementation of Firebase Authentication SDK and initialized authentication services.

update the functional requirments to final one

"Outlined the reservation booking feature and the loaction of the restruents. Defined the structure for users to make reservations at restaurants, including selection of restaurant, day, time, and group size. Pending implementation of functionality and confirmation messages."

--->Discussed with client and filtered  the functional requirements  and proposed  protytypes

--->Added few points in the use cases and updated the use cases iteration-2 and prepared documentation for that. 
--- In our project FoodieFinds adds functionality for admins to add reviews for restaurants within the application. Admins now have access to a restaurant management 
interface where they can input and submit reviews for the restaurants they have added. This feature enhances the administrative capabilities of the application, allowing 
admins to provide feedback and insights on the restaurants listed in the app.

--- IN the app we have added the problem statement and other requirments documents 
Updated the use cases iteration 2 which is required for the project implementation.

Revised Data Management Plan:
- Enhanced the data management strategy, incorporating new elements while removing others for optimization.

---Software Requirement Specification:
Added  the software requirement Specification  and updated the wiki.

---discussed and prepared the document of system reuirements specification totally worked on that and updated everything.

-- we added the information about the all the software requirments and specification documents to the wiki and submit that.

-- worked on a Research Project Proposal document on Edge Computing and IoT Security

- Completed the seed data and learned how to seed the JSON data into the firebase.


1. List the tasks that you were assigned for the week
Design the Layout: Create a basic layout for the restaurant search and filtering interface.
Develop the HTML Structure: Write the HTML code for the search bar, filters, and results section.
Add Basic CSS Styling: Apply initial CSS styles to layout the search bar, filters, and results section (basic styling only).
Check Layout and Functionality: Verify that all elements are correctly displayed and aligned on the page.
2. Explain how you can verify that the tasks you were assigned were completed
1. Basic Page Load: Open the page in a browser to ensure everything is displayed correctly.
2. Basic Interaction Test: Enter a location, select some filters, and ensure the inputs are captured without errors.
3. Confirm that the search bar accepts input and that filters work as expected.



















